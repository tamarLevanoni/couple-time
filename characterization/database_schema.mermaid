// Prisma Schema - מערכת השאלת משחקים
// Next.js + PostgreSQL + Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(cuid())
  name                   String
  email                  String   @unique
  phone                  String?
  roles                  Role[]
  managedCenterIds       String[]
  supervisedCenterIds    String[]
  defaultDashboard       String?  // "user" | "coordinator" | "super" | "admin"
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  managedCenters         Center[] @relation("CenterCoordinator")
  supervisedCenters      Center[] @relation("CenterSuperCoordinator")
  rentals                Rental[]
  notifications          Notification[]
  auditLogs              AuditLog[]
  actions                Action[]

  @@map("users")
}

model Center {
  id                     String   @id @default(cuid())
  name                   String
  city                   String
  area                   Area
  coordinatorId          String?
  superCoordinatorId     String?
  location               Json?    // { lat, lng }
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  coordinator            User?    @relation("CenterCoordinator", fields: [coordinatorId], references: [id])
  superCoordinator       User?    @relation("CenterSuperCoordinator", fields: [superCoordinatorId], references: [id])
  gameInstances          GameInstance[]

  @@map("centers")
}

model Game {
  id                     String   @id @default(cuid())
  name                   String
  description            String?
  category               GameCategory
  targetAudience         TargetAudience
  imageUrl               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  gameInstances          GameInstance[]

  @@map("games")
}

model GameInstance {
  id                     String   @id @default(cuid())
  gameId                 String
  centerId               String
  status                 GameInstanceStatus @default(AVAILABLE)
  expectedReturnDate     DateTime?
  notes                  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  game                   Game     @relation(fields: [gameId], references: [id])
  center                 Center   @relation(fields: [centerId], references: [id])
  rentals                Rental[]

  @@unique([gameId, centerId])
  @@map("game_instances")
}

model Rental {
  id                     String   @id @default(cuid())
  userId                 String
  gameInstanceId         String
  status                 RentalStatus @default(PENDING)
  requestDate            DateTime @default(now())
  approvedDate           DateTime?
  borrowDate             DateTime?
  returnDate             DateTime?
  expectedReturnDate     DateTime?
  notes                  String?
  rejectionReason        String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  user                   User     @relation(fields: [userId], references: [id])
  gameInstance           GameInstance @relation(fields: [gameInstanceId], references: [id])
  actions                Action[]
  notifications          Notification[]

  @@map("rentals")
}

model Action {
  id                     String   @id @default(cuid())
  rentalId               String
  userId                 String
  previousStatus         RentalStatus?
  newStatus              RentalStatus
  changeReason           String?
  changedAt              DateTime @default(now())

  // Relations
  rental                 Rental   @relation(fields: [rentalId], references: [id])
  user                   User     @relation(fields: [userId], references: [id])

  @@map("actions")
}

model Notification {
  id                     String   @id @default(cuid())
  userId                 String
  type                   NotificationType
  title                  String
  message                String
  isRead                 Boolean  @default(false)
  relatedEntityType      String?
  relatedEntityId        String?
  sentAt                 DateTime @default(now())
  readAt                 DateTime?

  // Relations
  user                   User     @relation(fields: [userId], references: [id])
  rental                 Rental?  @relation(fields: [relatedEntityId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id                     String   @id @default(cuid())
  userId                 String?
  action                 String
  entityType             String
  entityId               String
  oldValues              Json?
  newValues              Json?
  ipAddress              String?
  createdAt              DateTime @default(now())

  // Relations
  user                   User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum Role {
  USER
  CENTER_COORDINATOR
  SUPER_COORDINATOR
  ADMIN
}

enum TargetAudience {
  SINGLES
  MARRIED
  GENERAL
}

enum GameInstanceStatus {
  AVAILABLE
  BORROWED
  UNAVAILABLE
}

enum RentalStatus {
  PENDING
  APPROVED
  ACTIVE
  RETURNED
  REJECTED
}

enum NotificationType {
  RENTAL_REQUEST
  RENTAL_APPROVED
  RENTAL_REJECTED
  RENTAL_REMINDER
  RENTAL_OVERDUE
  SYSTEM_NOTIFICATION
}

enum GameCategory {
  COMMUNICATION
  INTIMACY
  FUN
  THERAPY
  PERSONAL_DEVELOPMENT
}

enum Area {
  NORTH
  CENTER
  SOUTH
  JERUSALEM
  JUDEA_SAMARIA
}